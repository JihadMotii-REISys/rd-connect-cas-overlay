#####
# Remember, all the properties from registered cas prefixes are validated.
# So, we have to create properties in custom prefixes like "custom." ,
# instead of starting with "cas." or similar, as unkown keys are rejected.
#####
#####
# See this https://apereo.github.io/2018/06/10/cas-mfa-google-authenticator/
#####

# unofficial keys
custom.domainName=rd-connect.eu
custom.hostName=rdconnectcas.${custom.domainName}
custom.serverProtocol=https
custom.serverPort=9443
custom.context=/cas
# /unofficial keys

cas.server.name=${custom.serverProtocol}://${custom.hostName}:${custom.serverPort}
cas.server.prefix=${cas.server.name}${custom.context}

cas.httpClient.truststore.file=file:/etc/tomcat8/cas-tomcat-server.jks
# Change this fake password by the real one used in the setup environment
cas.httpClient.truststore.psw=ChangeThisPassword!!!

cas.adminPagesSecurity.ip=127\.0\.0\.1

##################
# Internal setup #
##################
# This is badly needed to disable the embedded user list
cas.authn.accept.users=

###########################
# Throttle by IP and user #
###########################
# https://apereo.github.io/cas/5.3.x/installation/Configuration-Properties.html#authentication-throttling

cas.authn.throttle.usernameParameter=uid
cas.authn.throttle.schedule.startDelay=PT10S
cas.authn.throttle.schedule.repeatInterval=PT30S
cas.authn.throttle.appcode=CAS

cas.authn.throttle.failure.threshold=1
cas.authn.throttle.failure.code=AUTHENTICATION_FAILED
cas.authn.throttle.failure.rangeSeconds=3

##############
# LDAP Setup #
##############
# https://apereo.github.io/cas/5.3.x/installation/Configuration-Properties-Common.html#ldap-authenticationsearch-settings

cas.authn.ldap[0].type=AUTHENTICATED
cas.authn.ldap[0].ldapUrl=ldaps://ldap.${custom.domainName}
cas.authn.ldap[0].useSsl=true
cas.authn.ldap[0].useStartTls=false
# Manager credentials to bind; only used for searches.
cas.authn.ldap[0].bindDn=cn=admin,dc=rd-connect,dc=eu
# Change this fake password by the real one used in the setup environment
cas.authn.ldap[0].bindCredential=ChangeIt!!!

# == Authentication ==
# https://apereo.github.io/cas/5.3.x/installation/Configuration-Properties.html#ldap-authentication-1

# This is needed to tell when the login has happened, and other details
cas.authn.releaseProtocolAttributes=true

cas.authn.attributeRepository.defaultAttributesToRelease=uid,memberOf,distinguishedName,email,fullname,givenname,surname,isDisabled,userCategory
cas.authn.attributeRepository.ldap[0].attributes.uid=uid
cas.authn.attributeRepository.ldap[0].attributes.memberOf=memberOf
cas.authn.attributeRepository.ldap[0].attributes.dn=distinguishedName
cas.authn.attributeRepository.ldap[0].attributes.mail=email
cas.authn.attributeRepository.ldap[0].attributes.cn=fullname
cas.authn.attributeRepository.ldap[0].attributes.givenName=givenname
cas.authn.attributeRepository.ldap[0].attributes.sn=surname
cas.authn.attributeRepository.ldap[0].attributes.disabledAccount=isDisabled
cas.authn.attributeRepository.ldap[0].attributes.userClass=userCategory
cas.authn.attributeRepository.ldap[0].ldapUrl=ldaps://ldap.${custom.domainName}
cas.authn.attributeRepository.ldap[0].useSsl=true
cas.authn.attributeRepository.ldap[0].useStartTls=false
cas.authn.attributeRepository.ldap[0].bindDn=cn=admin,dc=rd-connect,dc=eu
# Change this fake password by the real one used in the setup environment
cas.authn.attributeRepository.ldap[0].bindCredential=cHaNgEiT!!!

#cas.authn.authenticationAttributeRelease.onlyRelease=uid,memberOf,distinguishedName,email,fullname,givenname,surname,isDisabled,userCategory
# We are hiding these protocol attributes by default, as it tells about the internal setup
cas.authn.authenticationAttributeRelease.neverRelease=samlAuthenticationStatementAuthMethod,successfulAuthenticationHandlers,credentialType,authenticationMethod

cas.authn.ldap[0].principalAttributeList=uid,memberOf,dn:distinguishedName,mail:email,cn:fullname,givenName:givenname,sn:surname,disabledAccount:isDisabled,userClass:userCategory

# cas.authn.ldap[0].collectDnAttribute=false
#cas.authn.ldap[0].principalDnAttributeName=dn
#cas.authn.ldap[0].allowMultiplePrincipalAttributeValues=false
cas.authn.ldap[0].allowMultiplePrincipalAttributeValues=true
cas.authn.ldap[0].allowMissingPrincipalAttributeValue=true
# cas.authn.ldap[0].credentialCriteria=

# == Search ==

cas.authn.ldap[0].baseDn=ou=people,dc=rd-connect,dc=eu
cas.authn.ldap[0].subtreeSearch=true
cas.authn.ldap[0].searchFilter=(&(|(uid={user})(mail={user}))(disabledAccount=FALSE)(acceptedGDPR=*)(!(acceptedGDPR=GDPR)))

# cas.authn.ldap[0].enhanceWithEntryResolver=true
# cas.authn.ldap[0].derefAliases=NEVER|SEARCHING|FINDING|ALWAYS
cas.authn.ldap[0].dnFormat=uid=%s,${cas.authn.ldap[0].baseDn}
# VeryImportant!!!!!!!! When it is empty, it delegates the authentication on LDAP libraries
cas.authn.ldap[0].principalAttributePassword=

# == Connection pooling settings ==
# https://apereo.github.io/cas/5.3.x/installation/Configuration-Properties-Common.html#ldap-connection-settings

cas.authn.ldap[0].minPoolSize=0
cas.authn.ldap[0].maxPoolSize=10
cas.authn.ldap[0].blockWaitTime=PT3S
cas.authn.ldap[0].validateOnCheckout=false
cas.authn.ldap[0].validatePeriodically=true
cas.authn.ldap[0].validatePeriod=PT5M
cas.authn.ldap[0].prunePeriod=PT2H
cas.authn.ldap[0].idleTime=PT10M

cas.authn.ldap[0].trustCertificates=file:${custom.resourcesDir}/cacert.pem

# official unassigned attributes
#cas.authn.ldap[0].poolPassivator=NONE|CLOSE|BIND
#cas.authn.ldap[0].connectionStrategy=
#cas.authn.ldap[0].providerClass=org.ldaptive.provider.unboundid.UnboundIDProvider
#cas.authn.ldap[0].connectTimeout=PT5S
#cas.authn.ldap[0].keystore=
#cas.authn.ldap[0].keystorePassword=
#cas.authn.ldap[0].keystoreType=JKS|JCEKS|PKCS12
#cas.authn.ldap[0].validateTimeout=PT5S
#cas.authn.ldap[0].failFast=true
#cas.authn.ldap[0].blockWaitTime=PT3S
#cas.authn.ldap[0].responseTimeout=PT5S
#cas.authn.ldap[0].allowMultipleDns=false
#cas.authn.ldap[0].allowMultipleEntries=false
#cas.authn.ldap[0].followReferrals=false
#cas.authn.ldap[0].binaryAttributes=objectGUID,someOtherAttribute
#cas.authn.ldap[0].name=

####################
# Service registry #
####################

cas.serviceRegistry.watcherEnabled=true

# cas.serviceRegistry.schedule.repeatInterval=120000
# cas.serviceRegistry.schedule.startDelay=15000

# Auto-initialize the registry from default JSON service definitions
#cas.serviceRegistry.initFromJson=true
cas.serviceRegistry.initFromJson=false

# cas.serviceRegistry.managementType=DEFAULT|DOMAIN

#########################
# LDAP Service registry #
#########################
# https://apereo.github.io/cas/5.3.x/installation/Configuration-Properties.html#ldap-service-registry

cas.serviceRegistry.ldap.ldapUrl=ldaps://ldap.${custom.domainName}
# Manager credentials to bind; only used for searches.
cas.serviceRegistry.ldap.bindDn=cn=admin,dc=rd-connect,dc=eu
# Change this fake password by the real one used in the setup environment
cas.serviceRegistry.ldap.bindCredential=cHANGEiT!!
cas.serviceRegistry.ldap.trustCertificates=file:${custom.resourcesDir}/cacert.pem
cas.serviceRegistry.ldap.minPoolSize=0
cas.serviceRegistry.ldap.maxPoolSize=10
cas.serviceRegistry.ldap.validateOnCheckout=false
cas.serviceRegistry.ldap.validatePeriodically=true
cas.serviceRegistry.ldap.validatePeriod=PT5M
cas.serviceRegistry.ldap.idleTime=PT10M
cas.serviceRegistry.ldap.prunePeriod=PT2H
cas.serviceRegistry.ldap.useSsl=true
cas.serviceRegistry.ldap.useStartTls=false

#cas.serviceRegistry.ldap.connectionStrategy=ACTIVE_PASSIVE

cas.serviceRegistry.ldap.baseDn=ou=services,dc=rd-connect,dc=eu
cas.serviceRegistry.ldap.subtreeSearch=true

cas.serviceRegistry.ldap.serviceDefinitionAttribute=description
cas.serviceRegistry.ldap.idAttribute=uid
cas.serviceRegistry.ldap.objectClass=casRegisteredService
# cas.serviceRegistry.ldap.searchFilter=(%s={0})
# cas.serviceRegistry.ldap.loadFilter=(objectClass=%s)

########################
# Google Authenticator #
########################
cas.authn.mfa.gauth.issuer=CAS
cas.authn.mfa.gauth.label=CASLabel

#######
# MFA #
#######
# Enabling this will force MFA with gauth on everyone
#cas.authn.mfa.globalProviderId=mfa-gauth

# File to keep associated secrets related to TOTP algorithm
cas.authn.mfa.gauth.json.location=file:${custom.resourcesDir}/multifactor-secrets.json

# Users willing to use multifactor must belong
# to the group mfa-eligible
#cas.authn.mfa.globalAuthenticationAttributeNameTriggers=memberOf
#cas.authn.mfa.globalAuthenticationAttributeValueRegex=cn=mfa-eligible,.*
# This will force mfa on any member of mfa-eligible group
cas.authn.mfa.globalPrincipalAttributeNameTriggers=memberOf
cas.authn.mfa.globalPrincipalAttributeValueRegex=.*=mfa-eligible,.*

# Multifactor bypass hook, written in groovy
#cas.authn.mfa.gauth.bypass.type=GROOVY
#cas.authn.mfa.gauth.bypass.groovy.location=file:${custom.resourcesDir}/MultifactorBypass.groovy

logging.config: file:${custom.resourcesDir}/log4j2.xml
